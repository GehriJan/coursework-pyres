@misc{plaisted2019propertiesextensionsalternatingpath,
      title={Properties and Extensions of Alternating Path Relevance - I},
      author={David A. Plaisted},
      year={2019},
      eprint={1905.08842},
      archivePrefix={arXiv},
      primaryClass={cs.LO},
      url={https://arxiv.org/abs/1905.08842},
}
@article{PLAISTED200359,
    title = {A relevance restriction strategy for automated deduction},
    journal = {Artificial Intelligence},
    volume = {144},
    number = {1},
    pages = {59-93},
    year = {2003},
    issn = {0004-3702},
    doi = {https://doi.org/10.1016/S0004-3702(02)00368-5},
    url = {https://www.sciencedirect.com/science/article/pii/S0004370202003685},
    author = {David A Plaisted and Adnan Yahya},
    keywords = {Relevance, Relevance metrics, Theorem proving, Sorted inference},
    abstract = {Identifying relevant clauses before attempting a proof may lead to more efficient automated theorem proving. Relevance is here defined relative to a given set of clauses S and one or more distinguished sets of support T. The role of a set of support T can be played by the negation of the theorem to be proved or the query to be answered in S which gives the refutation search goal orientation. The concept of relevance distance between two clauses C and D of S is defined using various metrics based on the properties of paths connecting C to D. This concept is extended to define relevance distance between a clause and a set (or multiple sets) of support. Informally, the relevance distance reflects how closely two clauses are related. The relevance distance to one or more support sets is used to compute a relevance setR, a subset of S that is unsatisfiable if and only if S is unsatisfiable. R is computed as the set of clauses of S at distance less than n from one or more support sets; if n is sufficiently large then R is unsatisfiable if S is. If R is much smaller than S, a refutation from R may be obtainable in much less time than a refutation from S. R must be efficiently computable to achieve an overall efficiency improvement. Different relevance metrics are defined, characterized and related. The tradeoffs between the amount of effort invested in computing a relevance set and the resulting gains in finding a refutation are addressed. Relevance sets may be utilized with arbitrary complete theorem proving strategies in a completeness-preserving manner. The potential of the advanced relevance techniques for various applications of theorem proving is discussed}
}
@InProceedings{teachingByExample,
    author="Schulz, Stephan and Pease, Adam",
    editor="Peltier, Nicolas and Sofronie-Stokkermans, Viorica",
    title="Teaching Automated Theorem Proving by Example: PyRes 1.2",
    booktitle="Automated Reasoning",
    year="2020",
    publisher="Springer International Publishing",
    address="Cham",
    pages="158--166",
    abstract="PyRes is a complete theorem prover for classical first-order logic. It is not designed for high performance, but to clearly demonstrate the core concepts of a saturating theorem prover. The system is written in extensively commented Python, explaining data structures, algorithms, and many of the underlying theoretical concepts. The prover implements binary resolution with factoring and optional negative literal selection. Equality is handled by adding the basic axioms of equality. PyRes uses the given-clause algorithm, optionally controlled by weight- and age evaluations for clause selection. The prover can read TPTP CNF/FOF input files and produces TPTP/TSTP proof objects.",
    isbn="978-3-030-51054-1"
}

