@inproceedings{iso18004,
  title     = {{ISO/IEC 18004: Information technology -- Automatic identification and data capture techniques -- QR code bar code symbology specification}},
  booktitle = {ISO/IEC 18004:2015},
  author    = {{International Organization for Standardization}},
  year      = {2015},
}

@incollection{20012115,
  title = {Concept index},
  editor = {Alan Robinson and Andrei Voronkov},
  booktitle = {Handbook of Automated Reasoning},
  publisher = {North-Holland},
  address = {Amsterdam},
  pages = {2115-2122},
  year = {2001},
  series = {Handbook of Automated Reasoning},
  isbn = {978-0-444-50813-3},
  doi = {https://doi.org/10.1016/B978-044450813-3/50031-X},
  url = {https://www.sciencedirect.com/science/article/pii/B978044450813350031X}
}

% Good primary source for FOL
@incollection{BARWISE19775,
  title = {An Introduction to First-Order Logic},
  editor = {Jon Barwise},
  series = {Studies in Logic and the Foundations of Mathematics},
  publisher = {Elsevier},
  volume = {90},
  pages = {5-46},
  year = {1977},
  booktitle = {HANDBOOK OF MATHEMATICAL LOGIC},
  issn = {0049-237X},
  doi = {https://doi.org/10.1016/S0049-237X(08)71097-8},
  url = {https://www.sciencedirect.com/science/article/pii/S0049237X08710978},
  author = {Jon Barwise},
  abstract = {Publisher Summary
  This chapter discusses the formulas that are certain finite strings of symbols. The “first” in the phrase “first-order logic” is to distinguish this form of logic from stronger logics, such as second-order or weak second-order logic, where certain extralogical notions (set or natural number) are taken as given in advance. The chapter provides information of what can and what cannot be expressed in first-order logic. Most of the examples are taken from the wealth of notions in modern algebra with which most mathematicians have at least a nodding acquaintance. The chapter also discusses many-sorted first-order logic, ω-logic, weak second-order logic, Infinitary logic, Logic with new quantifiers, and abstract model theory.}
}

@InProceedings{teaching_by_example,
  author="Schulz, Stephan and Pease, Adam",
  editor="Peltier, Nicolas and Sofronie-Stokkermans, Viorica",
  title="Teaching Automated Theorem Proving by Example: PyRes 1.2",
  booktitle="Automated Reasoning",
  year="2020",
  publisher="Springer International Publishing",
  address="Cham",
  pages="158--166",
  abstract="PyRes is a complete theorem prover for classical first-order logic. It is not designed for high performance, but to clearly demonstrate the core concepts of a saturating theorem prover. The system is written in extensively commented Python, explaining data structures, algorithms, and many of the underlying theoretical concepts. The prover implements binary resolution with factoring and optional negative literal selection. Equality is handled by adding the basic axioms of equality. PyRes uses the given-clause algorithm, optionally controlled by weight- and age evaluations for clause selection. The prover can read TPTP CNF/FOF input files and produces TPTP/TSTP proof objects.",
  isbn="978-3-030-51054-1"
}

% https://resources.mpi-inf.mpg.de/departments/d1/teaching/ss12/AdvancedGraphAlgorithms/Slides14.pdf

% ScienceDirect 04. März: https://www.sciencedirect.com/bookseries/mathematics-in-science-and-engineering/vol/79/suppl/C

@incollection{einfuehrung_grundlagen,
  title = {Einführung in die Informatik},
  author = {Bastian Küppers},
  series = {Studienbücher Informatik},
  publisher = {Springer Vieweg Wiesbaden},
  year = {2022},
  issn = {2522-0640},
  isbn = {978-3-658-37838-7},
  doi = {https://doi.org/10.1007/978-3-658-37838-7},
}

@incollection{mathe_grundlagen_it_denken_und_beweisen,
  title = {Mathematische Grundlagen der Informatik},
  booktitle = {Mathematisches Denken und Beweisen - Eine Einführung},
  author = {Christoph Meinel, Martin Mundhenk},
  publisher = {Springer Vieweg Wiesbaden},
  year = {2024},
  isbn = {978-3-658-43136-5},
  doi = {https://doi.org/10.1007/978-3-658-43136-5},
}

@incollection{mathe_grundlagen_it_mengen_logik,
  title = {Mathematische Grundlagen der Informatik},
  booktitle = {Mengen, Logik, Rekursion},
  author = {Kurt-Ulrich Witt},
  publisher = {Springer Vieweg Wiesbaden},
  year = {2013},
  isbn = {978-3-658-03079-7},
  doi = {https://doi.org/10.1007/978-3-658-03079-7},
}

//10.5555/1218615.1218621
@article{e_1,
  author = {Schulz, Stephan},
  title = {E - a brainiac theorem prover},
  year = {2002},
  issue_date = {August 2002},
  publisher = {IOS Press},
  address = {NLD},
  volume = {15},
  number = {2,3},
  issn = {0921-7126},
  abstract = {We describe the superposition-based theorem prover E. E is a sound and complete prover for clausal first order logic with equality. Important properties of the prover include strong redundancy elimination criteria, the DISCOUNT loop proof procedure, a very flexible interface for specifying search control heuristics, and an efficient inference engine. We also discuss strength and weaknesses of the system.},
  journal = {AI Commun.},
  month = aug,
  pages = {111–126},
  numpages = {16},
  keywords = {E, Theorem proving, rewriting, search control, superposition},
  url={https://dl.acm.org/doi/abs/10.5555/1218615.1218621}
}

//10.1007/978-3-030-29436-6_29
@InProceedings{e_2,
  author="Schulz, Stephan and Cruanes, Simon and Vukmirovi{\'{c}}, Petar",
  editor="Fontaine, Pascal",
  title="Faster, Higher, Stronger: E 2.3",
  booktitle="Automated Deduction -- CADE 27",
  year="2019",
  publisher="Springer International Publishing",
  address="Cham",
  pages="495--507",
  abstract="E 2.3 is a theorem prover for many-sorted first-order logic with equality. We describe the basic logical and software architecture of the system, as well as core features of the implementation. We particularly discuss recently added features and extensions, including the extension to many-sorted logic, optional limited support for higher-order logic, and the integration of SAT techniques via PicoSAT. Minor additions include improved support for TPTP standard features, always-on internal proof objects, and lazy orphan removal. The paper also gives an overview of the performance of the system, and describes ongoing and future work.",
  isbn="978-3-030-29436-6",
  doi="10.1007/978-3-030-29436-6_29",
}

@misc{e_gh,
  author = {Schulz, Stephan},
  title = {eprover},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/eprover/eprover}},
}

@InProceedings{vampire_1,
  author="Kov{\'a}cs, Laura and Voronkov, Andrei",
  editor="Sharygina, Natasha and Veith, Helmut",
  title="First-Order Theorem Proving and Vampire",
  booktitle="Computer Aided Verification",
  year="2013",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="1--35",
  abstract="In this paper we give a short introduction in first-order theorem proving and the use of the theorem prover Vampire. We discuss the superposition calculus and explain the key concepts of saturation and redundancy elimination, present saturation algorithms and preprocessing, and demonstrate how these concepts are implemented in Vampire. Further, we also cover more recent topics and features of Vampire designed for advanced applications, including satisfiability checking, theory reasoning, interpolation, consequence elimination, and program analysis.",
  doi="10.1007/978-3-642-39799-8_1",
}

@misc{vampire_gh,
  title = {vampire},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/vprover/vampire},
}

//10.1007/978-3-642-02959-2_10
@InProceedings{spass_1,
  author="Weidenbach, Christoph and Dimova, Dilyana and Fietzke, Arnaud and Kumar, Rohit and Suda, Martin and Wischnewski, Patrick",
  editor="Schmidt, Renate A.",
  title="SPASS Version 3.5",
  booktitle="Automated Deduction -- CADE-22",
  year="2009",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="140--145",
  abstract="SPASS is an automated theorem prover for full first-order logic with equality and a number of non-classical logics. This system description provides an overview of our recent developments in SPASS 3.5 including subterm contextual rewriting, improved split backtracking, a significantly faster FLOTTER implementation with additional control flags, completely symmetric implementation of forward and backward redundancy criteria, faster parsing with improved support for big files, faster and extended sort module, and support for include commands in input files. Finally, SPASS 3.5 can now parse files in TPTP syntax, comes with a new converter tptp2dfg and is distributed under a BSD style license.",
  isbn="978-3-642-02959-2",
  doi="10.1007/978-3-642-02959-2_10",
}

@misc{spass_gh,
  title = {tspass},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/michel-ludwig/tspass},
}

//10.1007/978-3-540-71070-7_24
@InProceedings{iprover_1,
  author="Korovin, Konstantin",
  editor="Armando, Alessandro and Baumgartner, Peter and Dowek, Gilles",
  title="iProver -- An Instantiation-Based Theorem Prover for First-Order Logic (System Description)",
  booktitle="Automated Reasoning",
  year="2008",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="292--298",
  abstract="iProver is an instantiation-based theorem prover which is based on Inst-Gen calculus, complete for first-order logic. One of the distinctive features of iProver is a modular combination of instantiation and propositional reasoning. In particular, any state-of-the art SAT solver can be integrated into our framework. iProver incorporates state-of-the-art implementation techniques such as indexing, redundancy elimination, semantic selection and saturation algorithms. Redundancy elimination implemented in iProver include: dismatching constraints, blocking non-proper instantiations and propositional-based simplifications. In addition to instantiation, iProver implements ordered resolution calculus and a combination of instantiation and ordered resolution. In this paper we discuss the design of iProver and related implementation issues.",
  isbn="978-3-540-71070-7",
  doi="10.1007/978-3-540-71070-7_24",
}

@misc{iprover_gh,
  title = {iprover},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/edechter/iprover},
}

@misc{python_history,
  title = {Python - History and License},
  howpublished = {\url{https://docs.python.org/3/license.html}},
  note = {Accessed: 2025-03-12},
}
@article{sanner1999python,
  title={Python: a programming language for software integration and development},
  author={Sanner, Michel F and others},
  journal={J Mol Graph Model},
  volume={17},
  number={1},
  pages={57--61},
  year={1999}
}



// APSP matrix algorithm
@article{SEIDEL1995400,
  title = {On the All-Pairs-Shortest-Path Problem in Unweighted Undirected Graphs},
  journal = {Journal of Computer and System Sciences},
  volume = {51},
  number = {3},
  pages = {400-403},
  year = {1995},
  issn = {0022-0000},
  doi = {https://doi.org/10.1006/jcss.1995.1078},
  url = {https://www.sciencedirect.com/science/article/pii/S0022000085710781},
  author = {R. Seidel},
  abstract = {We present an algorithm, APD, that solves the distance version of the all-pairs-shortest-path problem for undirected, unweighted n-vertex graphs in time O(M(n) log n), where M(n) denotes the time necessary to multiply two n × n matrices of small integers (which is currently known to be o(n2.376)). We also address the problem of actually finding a shortest path between each pair of vertices and present a randomized algorithm that matches APD in its simplicity and in its expected running time.}
}
//APSP matrix algorithm
@article{GALIL1997103,
  title = {All Pairs Shortest Distances for Graphs with Small Integer Length Edges},
  journal = {Information and Computation},
  volume = {134},
  number = {2},
  pages = {103-139},
  year = {1997},
  issn = {0890-5401},
  doi = {https://doi.org/10.1006/inco.1997.2620},
  url = {https://www.sciencedirect.com/science/article/pii/S0890540197926201},
  author = {Zvi Galil and Oded Margalit},
  abstract = {There is a way to transform the All Pairs Shortest Distances (APSD) problem where the edge lengths are integers with small (⩽M) absolute value into a problem with edge lengths in {−1,0,1}. This transformation allows us to use the algorithms we developed earlier ([1]) and yields quite efficient algorithms. In this paper we give new improved algorithms for these problems. Forn=|V| the number of vertices,Mthe bound on edge length, andωthe exponent of matrix multiplication, we get the following results: 1. A directed nonnegative APSD(n,M) algorithm which runs inO(T(n,M)) time, where[formula]2. A undirected APSD(n,M) algorithm which runs inO(M(ω+1)/2nωlog(Mn)) time.}
}

// Matrix based improved: https://arxiv.org/pdf/2208.04514
@inproceedings{Feng_2024,
   series={ICS ’24},
   title={DAWN: Matrix Operation-Optimized Algorithm for Shortest Paths Problem on Unweighted Graphs},
   url={http://dx.doi.org/10.1145/3650200.3656600},
   DOI={10.1145/3650200.3656600},
   booktitle={Proceedings of the 38th ACM International Conference on Supercomputing},
   publisher={ACM},
   author={Feng, Yelai and Wang, Huaixi and Zhu, Yining and Liu, Xiandong and Lu, Hongyi and Liu, Qing},
   year={2024},
   month=may,
   pages={1–13},
   collection={ICS ’24}
}

@article{apsp_unweighted,
author = {Chan, Timothy M.},
title = {All-pairs shortest paths for unweighted undirected graphs in o(mn) time},
year = {2012},
issue_date = {September 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {4},
issn = {1549-6325},
url = {https://doi.org/10.1145/2344422.2344424},
doi = {10.1145/2344422.2344424},
journal = {ACM Trans. Algorithms},
month = oct,
articleno = {34},
numpages = {17},
keywords = {word RAM, shortest paths, Graph algorithms},
}

@article{graph_and_prob,
title={Graph Theory and Probability},
volume={11},
doi={10.4153/CJM-1959-003-9},
journal={Canadian Journal of Mathematics},
author={Erdös, P.},
year={1959},
  pages={34–38}
}

@INPROCEEDINGS{distance_queries,
    author={Yuster, R. and Zwick, U.},
    booktitle={46th Annual IEEE Symposium on Foundations of Computer Science (FOCS'05)},
    title={Answering distance queries in directed graphs using fast matrix multiplication},
    year={2005},
    volume={},
    number={},
    pages={389-396},
    keywords={Shortest path problem;Data structures},
    doi={10.1109/SFCS.2005.20}
  }
@article{approximate_distance,
  author = {Thorup, Mikkel and Zwick, Uri},
  title = {Approximate distance oracles},
  year = {2005},
  issue_date = {January 2005},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {52},
  number = {1},
  issn = {0004-5411},
  url = {https://doi.org/10.1145/1044731.1044732},
  doi = {10.1145/1044731.1044732},
  abstract = {Let G = (V,E) be an undirected weighted graph with |V| = n and |E| = m. Let k ≥ 1 be an integer. We show that G = (V,E) can be preprocessed in O(kmn1/k) expected time, constructing a data structure of size O(kn1+1/k), such that any subsequent distance query can be answered, approximately, in O(k) time. The approximate distance returned is of stretch at most 2k−1, that is, the quotient obtained by dividing the estimated distance by the actual distance lies between 1 and 2k−1. A 1963 girth conjecture of Erd\'{o}s, implies that Ω(n1+1/k) space is needed in the worst case for any real stretch strictly smaller than 2k+1. The space requirement of our algorithm is, therefore, essentially optimal. The most impressive feature of our data structure is its constant query time, hence the name "oracle". Previously, data structures that used only O(n1+1/k) space had a query time of Ω(n1/k).Our algorithms are extremely simple and easy to implement efficiently. They also provide faster constructions of sparse spanners of weighted graphs, and improved tree covers and distance labelings of weighted or unweighted graphs.},
  journal = {J. ACM},
  month = jan,
  pages = {1–24},
  numpages = {24},
  keywords = {spanners, shortest paths, distances, distance queries, distance labelings, Approximate distance oracles}
}
@INPROCEEDINGS{apsp_undirected,
  author={Shoshan, A. and Zwick, U.},
  booktitle={40th Annual Symposium on Foundations of Computer Science (Cat. No.99CB37039)},
  title={All pairs shortest paths in undirected graphs with integer weights},
  year={1999},
  volume={},
  number={},
  pages={605-614},
  keywords={Read only memory;Matrices;Upper bound;Computer science},
  doi={10.1109/SFFCS.1999.814635}
}
@Article{dijkstra,
  author={Dijkstra, E. W.},
  title={A note on two problems in connexion with graphs},
  journal={Numerische Mathematik},
  year={1959},
  month={Dec},
  day={01},
  volume={1},
  number={1},
  pages={269-271},
  issn={0945-3245},
  doi={10.1007/BF01386390},
  url={https://doi.org/10.1007/BF01386390}
}
@misc{properties_extensions_apt,
      title={Properties and Extensions of Alternating Path Relevance - I},
      author={David A. Plaisted},
      year={2019},
      eprint={1905.08842},
      archivePrefix={arXiv},
      primaryClass={cs.LO},
      url={https://arxiv.org/abs/1905.08842},
}

@InProceedings{performance_clause_selection,
  author =       {Stephan Schulz and Martin M{\"o}hrmann},
  title =        {Performance of Clause Selection Heuristics for
                  Saturation-Based Theorem Proving},
  OPTcrossref =  {},
  OPTkey =       {},
  booktitle =    {Proc.\ of the 8th IJCAR, Coimbra},
  year =         {2016},
  editor =       {Nicola Olivetti and Ashish Tiwari},
  volume =       {9706},
  OPTnumber =    {},
  series =       {LNAI},
  pages =        {330--345},
  OPTmonth =     {},
  OPTaddress =   {},
  OPTorganization = {},
  publisher =    {Springer},
  OPTannote =    {}
}
@InProceedings{sine_qua_non,
  author="Krystof Hoder and Andrei Voronkov",
  title="Sine qua non for large theory reasoning",
  booktitle="Lecture Notes in Computer Science - CADE",
  volume="6803",
  year="2011",
  publisher="Springer",
  pages="299-314",
}
@article{semantic_selection,
  title={Semantic Selection of Premisses for Automated Theorem Proving.},
  author={Pudl{\'a}k, Petr},
  journal={ESARLT},
  volume={257},
  year={2007}
}
@article{symbol_sharing_relevance,
  title = {Lightweight relevance filtering for machine-generated resolution problems},
  journal = {Journal of Applied Logic},
  volume = {7},
  number = {1},
  pages = {41-57},
  year = {2009},
  note = {Special Issue: Empirically Successful Computerized Reasoning},
  issn = {1570-8683},
  doi = {https://doi.org/10.1016/j.jal.2007.07.004},
  url = {https://www.sciencedirect.com/science/article/pii/S1570868307000626},
  author = {Jia Meng and Lawrence C. Paulson},
  keywords = {Relevance filtering, Proving in large theories, Automated reasoning, Interactive theorem proving},
  abstract = {Irrelevant clauses in resolution problems increase the search space, making proofs hard to find in a reasonable amount of processor time. Simple relevance filtering methods, based on counting symbols in clauses, improve the success rate for a variety of automatic theorem provers and with various initial settings. We have designed these techniques as part of a project to link automatic theorem provers to the interactive theorem prover Isabelle. We have tested them for problems involving thousands of clauses, which yield poor results without filtering. Our methods should be applicable to other tasks where the resolution problems are produced mechanically and where completeness is less important than achieving a high success rate with limited processor time.}
}
@Inbook{interactive_automated_tp,
author="Ahrendt and Beckert and H{\"a}hnle and Menzel and Reif and Schellhorn and Schmitt",
editor="Bibel, Wolfgang and Schmitt, Peter H.",
title="Integrating Automated and Interactive Theorem Proving",
bookTitle="Automated Deduction --- A Basis for Applications: Volume II: Systems and Implementation Techniques",
year="1998",
publisher="Springer Netherlands",
address="Dordrecht",
pages="97--116",
abstract="Automated and interactive theorem proving are the two main directions in the field of deduction. Most chapters of this book belong to either the one or the other, whether focusing on theory, on methods or on systems. This reflects the fact that, for a long time, research in computer-aided reasoning was divided into these two directions, driven forward by different communities. Both groups offer powerful tools for different kinds of tasks, with different solutions, leading to different performance and application profiles. Some important examples are: ACL2 (Kaufmann and Moore, 1988), HOL (Gordon, 1988), IMPS (Farmer et al., 1996), Isabelle (Paulson, 1994), KIV (Reif et al., 1997) (see also Chapter II.1.1), NQTHM (Boyer and Moore, 1979), and PVS (Owre et al., 1992) for the interactive (or tactical) theorem proving community; and KoMeT (Bibel et al., 1994), Otter (Wos et al., 1992), Protein (Baumgartner and Furbach, 1994), Setheo (Goller et al., 1994), Spass (Weidenbach et al., 1996), and 3TAP (Beckert et al., 1996) for the automated theorem proving community.",
isbn="978-94-017-0435-9",
doi="10.1007/978-94-017-0435-9_4",
url="https://doi.org/10.1007/978-94-017-0435-9_4"
}

@Inbook{tp_large_theories,
author="Reif, Wolfgang and Schellhorn, Gerhard",
editor="Bibel, Wolfgang and Schmitt, Peter H.", title="Theorem Proving in Large Theories",
bookTitle="Automated Deduction --- A Basis for Applications: Volume III Applications",
year="1998",
publisher="Springer Netherlands",
address="Dordrecht",
pages="225--241",
abstract="The motivation behind this chapter is the question: how can formal software verification benefit from automated first-order theorem proving? To answer the question we used the software verification tool KIV (Reif et al., 1995), (Reif, 1995), (Reif et al., 1997) as a test environment. We did comparative experiments with five automated theorem provers as dedicated subsystems for the non-inductive first-order goals that showed up during proofs of specification- and program properties in KIV. The five provers were Otter (Wos et al., 1992), Protein (Baumgartner and Furbach, 1994), SETHEO (Goller et al., 1994), Spass (Weidenbach et al., 1996) and 3TAP (Beckert et al., 1996). The experiments were performed in the context of a joint project between the research groups of 3TAP and KIV at the Universities of Karlsruhe and Ulm on the conceptual integration of interactive and automated theorem proving. In this project we use KIV and 3TAP as an experimental platform (for other results of this project, see Chapter II.1.4). Therefore, 3TAP could be called from inside KIV, whereas for the other provers the problems had to be transferred by hand.",
isbn="978-94-017-0437-3",
doi="10.1007/978-94-017-0437-3_9",
url="https://doi.org/10.1007/978-94-017-0437-3_9"
}

